/* Auto-generated by genmsg_cpp for file /home/marco/catkin_ws/src/pi_vision/pi_face_tracker/srv/SetROI.srv */
#ifndef PI_FACE_TRACKER_SERVICE_SETROI_H
#define PI_FACE_TRACKER_SERVICE_SETROI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/RegionOfInterest.h"



namespace pi_face_tracker
{
template <class ContainerAllocator>
struct SetROIRequest_ {
  typedef SetROIRequest_<ContainerAllocator> Type;

  SetROIRequest_()
  : roi()
  {
  }

  SetROIRequest_(const ContainerAllocator& _alloc)
  : roi(_alloc)
  {
  }

  typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
   ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  roi;


  typedef boost::shared_ptr< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_face_tracker::SetROIRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetROIRequest
typedef  ::pi_face_tracker::SetROIRequest_<std::allocator<void> > SetROIRequest;

typedef boost::shared_ptr< ::pi_face_tracker::SetROIRequest> SetROIRequestPtr;
typedef boost::shared_ptr< ::pi_face_tracker::SetROIRequest const> SetROIRequestConstPtr;



template <class ContainerAllocator>
struct SetROIResponse_ {
  typedef SetROIResponse_<ContainerAllocator> Type;

  SetROIResponse_()
  {
  }

  SetROIResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_face_tracker::SetROIResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetROIResponse
typedef  ::pi_face_tracker::SetROIResponse_<std::allocator<void> > SetROIResponse;

typedef boost::shared_ptr< ::pi_face_tracker::SetROIResponse> SetROIResponsePtr;
typedef boost::shared_ptr< ::pi_face_tracker::SetROIResponse const> SetROIResponseConstPtr;


struct SetROI
{

typedef SetROIRequest Request;
typedef SetROIResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetROI
} // namespace pi_face_tracker

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pi_face_tracker::SetROIRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9586986cb2458d45fdbda6087252affd";
  }

  static const char* value(const  ::pi_face_tracker::SetROIRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9586986cb2458d45ULL;
  static const uint64_t static_value2 = 0xfdbda6087252affdULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_face_tracker/SetROIRequest";
  }

  static const char* value(const  ::pi_face_tracker::SetROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/RegionOfInterest roi\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::pi_face_tracker::SetROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pi_face_tracker::SetROIResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::pi_face_tracker::SetROIResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_face_tracker/SetROIResponse";
  }

  static const char* value(const  ::pi_face_tracker::SetROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::pi_face_tracker::SetROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pi_face_tracker::SetROIRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.roi);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetROIRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pi_face_tracker::SetROIResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetROIResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pi_face_tracker::SetROI> {
  static const char* value() 
  {
    return "9586986cb2458d45fdbda6087252affd";
  }

  static const char* value(const pi_face_tracker::SetROI&) { return value(); } 
};

template<>
struct DataType<pi_face_tracker::SetROI> {
  static const char* value() 
  {
    return "pi_face_tracker/SetROI";
  }

  static const char* value(const pi_face_tracker::SetROI&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pi_face_tracker::SetROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9586986cb2458d45fdbda6087252affd";
  }

  static const char* value(const pi_face_tracker::SetROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pi_face_tracker::SetROIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_face_tracker/SetROI";
  }

  static const char* value(const pi_face_tracker::SetROIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pi_face_tracker::SetROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9586986cb2458d45fdbda6087252affd";
  }

  static const char* value(const pi_face_tracker::SetROIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pi_face_tracker::SetROIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_face_tracker/SetROI";
  }

  static const char* value(const pi_face_tracker::SetROIResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PI_FACE_TRACKER_SERVICE_SETROI_H

